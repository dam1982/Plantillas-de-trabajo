<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="65959072-954b-460e-b7fc-5148e025b183" activeEnvironment="Default" name="Zoftinium_Mockups" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="3ab02e7f-a485-4180-8f89-8fc30add4d76" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="CreateSession" path="/Authorization/CreateSession" id="1817d898-5a9e-42cc-9991-0260e5296158"><con:settings/><con:parameters/><con:method name="CreateSession 1" id="5d06e11a-774b-488b-a100-16a72f7cafe8" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://localhost/Authorization/CreateSession">cre:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:cre="http://localhost/Authorization/CreateSession">cre:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:request name="Request 1" id="8a715477-f281-4931-9db4-bddc0c10fcd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8081</con:endpoint><con:request>{
	}</con:request><con:originalUri>http://localhost/Authorization/CreateSession</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="PostAction" path="/ServiceRouter/PostAction/GetNotifications" id="1817d898-5a9e-42cc-9991-0260e5296158"><con:settings/><con:parameters/><con:method name="PostAction" id="5d06e11a-774b-488b-a100-16a72f7cafe8" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://localhost/Authorization/CreateSession">cre:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>403</con:status><con:params/><con:element xmlns:cre="http://localhost/Authorization/CreateSession">cre:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json;charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cre="http://localhost/Authorization/CreateSession">cre:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>text/html; charset=iso-8859-1</con:mediaType><con:status>200</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="8a715477-f281-4931-9db4-bddc0c10fcd3" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding/><con:endpoint>http://localhost:8081</con:endpoint><con:request>{
   "Success": true,
   "Message": "",
   "SessionToken": "720ff78b-4109-4c64-89d0-911b17683d6f",
   "Data":  { "filters":{} },
   "User": null,
   "Service": "BackendService",
   "IpAddress": "127.0.0.1",
   "Module": "RequestService",
   "Action": "SaveUser"
}</con:request><con:originalUri>http://localhost/Authorization/CreateSession</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:restMockService id="46b3ae98-c67c-48b9-9c92-23ce684cde27" port="8081" path="/" host="localhost" name="ApiGateway.Service" docroot=""><con:settings/><con:properties/><con:onRequestScript>mockRequest.httpResponse.addHeader( "Access-Control-Allow-Origin", "*" )
mockRequest.httpResponse.addHeader( "Access-Control-Allow-Headers", "*" )</con:onRequestScript><con:restMockAction name="Authorization/CreateSession" method="POST" resourcePath="/Authorization/CreateSession" id="6baa97d8-8f79-4fa0-a585-0c32616a7431"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="93a186ba-7fed-4f9b-b85f-361e3784d582" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "Success": true,
  "Message": "Credenciales validas",
  "SessionToken": "fb8d9868-2e81-4496-8127-a9dd695eeb3b",
  "Data": null,
  "User": {
    "UserId": 1,
    "Names": "Pedro Perez",
    "Document": "79800700",
    "Mail": "pedro@gmail.com",
    "Phone": "3107778899",
    "Active": true,
    "Address": "Calle 59 63-96"
  },
  "IpAdress": "127.0.0.1",
  "Service": "ApiGateway",
  "Module": "Authorization",
  "Action": "CreateSession",
  "ApiKey": null,
  "Version": 1
} </con:responseContent><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>GET,POST,PUT,DELETE</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="CORS" method="OPTIONS" resourcePath="/" id="9677e827-8601-4879-8d9d-b6f28c796d0f"><con:settings/><con:defaultResponse>Response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response" id="61ac1cec-25bc-4708-9849-d581e8b17e4b" httpResponseStatus="200"><con:settings/><con:responseContent/><con:header><con:name>Access-Control-Allow-Methods</con:name><con:value>GET,POST,OPTIONS,HEAD,PUT,DELETE</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="ServiceRouter/GetAction" method="POST" resourcePath="/ServiceRouter/GetAction" id="76883b03-e465-4bc1-9305-a68efacb9022"><con:settings/><con:defaultResponse>Response 2</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="62f486f5-3901-40b3-af90-aa6fe9cfaffc" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>  {
    "Success": true,
    "Message": "Ok",
    "SessionToken": "fb8d9868-2e81-4496-8127-a9dd695eeb3b",
    "Data": [{
      "Code": "Test1",
      "Labels": [
        "Transicion",
        "Primaria",
        "Secundaria",
        "Media"
      ],
      "Title": "Cobertura Estudiantil",
      "Source": "Min Educación",
      "Measure": "%",
      "Description": "Desagregación por coberturas ",
      "Function": "Desagregación por coberturas (% ,00) (Comparativo departamental y nacional)",
      "ViewType": "Basic",
      "GraphicType": "bar",
      "LastUpdate": "2019/01/01",
      "Total": 100,
      "Group": "Educacion",
      "Datasets": [
        {
          "Label": "Neta",
          "Data": [
            20,
            25.2,
            24.8,
            30
          ]
        },
        {
          "Label": "Bruta",
          "Data": [
            30,
            20,
            24.5,
            25.5
          ]
        }
      ]
    },
    {
      "Code": "Test2",
      "Labels": [
        "Pregrado",
        "Postgrado",
        "Maestria",
        "Doctorado"
      ],
      "Title": "Cobertura Universitaria",
      "Source": "Min Educación",
      "Measure": "%",
      "Description": "Desagregación por coberturas ",
      "Function": "Desagregación por coberturas (% ,00) (Comparativo departamental y nacional)",
      "ViewType": "Basic",
      "GraphicType": "bar",
      "LastUpdate": "2019/01/01",
      "Total": 100,
      "Group": "Educacion",
      "Datasets": [
        {
          "Label": "Neta",
          "Data": [
            10,
            15.2,
            14.8,
            10
          ]
        },
        {
          "Label": "Bruta",
          "Data": [
            10,
            10,
            14.5,
            15.5
          ]
        }
      ]
    }
    
    
    ],
    "User": {
      "UserId": 1,
      "Names": "Pedro Perez",
      "Document": "79800700",
      "Mail": "pedro@gmail.com",
      "Phone": "3107778899",
      "Active": true,
      "Address": "Calle 59 63-96"
    },
    "IpAdress": "127.0.0.1",
    "Service": "Indicators",
    "Module": "Indicators",
    "Action": "GetViews",
    "ApiKey": null,
    "Version": 1
  }</con:responseContent><con:header><con:name>Content-Type</con:name><con:value>application/json;charset=iso-8859-1 </con:value></con:header></con:response><con:response name="Response 2" id="a3371f0f-81f2-45b7-81cd-2ae92629c827" httpResponseStatus="200"><con:settings/><con:responseContent/></con:response></con:restMockAction><con:restMockAction name="ServiceRouter/PostAction" method="POST" resourcePath="/ServiceRouter" id="637ee249-d8bd-4912-a772-750efa7a94de"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body*/
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("Response1") )
{
    // return the name of the response you want to dispatch
    return "Response1"
}
if( requestBody.contains("GetLocations") )
{
    // return the name of the response you want to dispatch
    return "GetLocations"
}
if( requestBody.contains("SaveLocation") )
{
    // return the name of the response you want to dispatch
    return "SaveLocation"
}

else{
	return "GetLocations"
	}

</con:dispatchPath><con:response name="Response 1" id="93bf3de3-fb0d-45ae-8b31-0b032ac9a4b8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>
{
   "Success": true,
   "Message": "",
   "SessionToken": "720ff78b-4109-4c64-89d0-911b17683d6f",
   "Data":   [
     { 
    "LocationId" : 1,
    "Rack" : 1,
    "Row": 1,
    "Column": 1,
    "Side": 1,
    "LocationName": "M010101A",
    "Active": true 
   }
   ],
   "User": null,
   "Service": "Communications",
   "IpAddress": "127.0.0.1",
   "Module": "ExternalLibrary",
   "Action": "SaveGroups"
}













</con:responseContent></con:response><con:response name="GetLocations" id="fe11fc77-185d-4c02-b4f6-4be5b893166d" httpResponseStatus="200"><con:settings/><con:responseContent>
{
   "Success": true,
   "Message": "",
   "SessionToken": "720ff78b-4109-4c64-89d0-911b17683d6f",
   "Data":   [
     { 
    "LocationId" : 1,
    "Rack" : "01",
    "Row": "01",
    "Column": "01",
    "Side": "A",
    "LocationName": "M010101A",
    "Active": false 
   },
    { 
    "LocationId" : 2,
    "Rack" : "02",
    "Row": "02",
    "Column": "02",
    "Side": "B",
    "LocationName": "M020202B",
    "Active": true 
   },
    { 
    "LocationId" : 3,
    "Rack" : "03",
    "Row": "03",
    "Column": "03",
    "Side": "C",
    "LocationName": "M030303C",
    "Active": true 
   },
   { 
    "LocationId" : 4,
    "Rack" : "04",
    "Row": "04",
    "Column": "04",
    "Side": "D",
    "LocationName": "M040404D",
    "Active": false 
   },
   { 
    "LocationId" : 5,
    "Rack" : "05",
    "Row": "05",
    "Column": "05",
    "Side": "E",
    "LocationName": "M050505E",
    "Active": true 
   }
   ],
   "User": null,
   "Service": "Communications",
   "IpAddress": "127.0.0.1",
   "Module": "ExternalLibrary",
   "Action": "SaveGroups"
}













</con:responseContent></con:response><con:response name="SaveLocation" id="1f67b55e-502c-4090-ab0e-e714bdfa09d7" httpResponseStatus="200"><con:settings/><con:responseContent>
{
   "Success": true,
   "Message": "",
   "SessionToken": "720ff78b-4109-4c64-89d0-911b17683d6f",
   "Data":   true,
   "User": null,
   "Service": "Communications",
   "IpAddress": "127.0.0.1",
   "Module": "ExternalLibrary",
   "Action": "SaveGroups"
}


</con:responseContent></con:response><con:response name="UpdateLocation" id="83d49315-e3a2-42ab-ab8b-3d067b7c8e9b" httpResponseStatus="200"><con:settings/><con:responseContent>{
   "Success": true,
   "Message": "",
   "SessionToken": "720ff78b-4109-4c64-89d0-911b17683d6f",
   "Data":  true,
   "User": null,
   "Service": "Communications",
   "IpAddress": "127.0.0.1",
   "Module": "ExternalLibrary",
   "Action": "SaveGroups"
}













</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>